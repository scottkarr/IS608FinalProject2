test <- -train
training_data <- MyData[train,]
train
typeof(train)
train <- data.frame(sample_n(MyData, 250))
MyData[train,]
set.seed(2)
training_data <- data.frame(sample_n(MyData, 250))
testing_data <- -train
library(dplyr)
library(ISLR)
library(tree)
MyData <- read.csv(file="https://raw.githubusercontent.com/scottkarr/IS608FinalProject/master/data/ELAScoresBySchool.csv", header=TRUE, sep=",",stringsAsFactors=FALSE)
MyData <- filter(MyData, Year == 2016 & Grade == 7)
MyData <- MyData[,c(2,4,5,10,20)]
MyData$Lvl_Pass_Pct <- round(as.numeric(MyData$Lvl_Pass_Pct)/25, digits=0)
cols <- c('Borough','Lvl_Pass_Pct')
MyData[cols] <- lapply(MyData[cols], as.factor)
MyData <- data.frame(MyData[complete.cases(MyData),])
summary(MyData)
#split data into testing and training sets using
set.seed(2)
training_data <- data.frame(sample_n(MyData, 250))
testing_data <- -train
testing_predict <- MyData$Lvl_Pass_Pct[test]
set.seed(2)
training_data <- data.frame(sample_n(MyData, 250))
testing_data <- -training_data
library(dplyr)
library(ISLR)
library(tree)
MyData <- read.csv(file="https://raw.githubusercontent.com/scottkarr/IS608FinalProject/master/data/ELAScoresBySchool.csv", header=TRUE, sep=",",stringsAsFactors=FALSE)
MyData <- filter(MyData, Year == 2016 & Grade == 7)
MyData <- MyData[,c(2,4,5,10,20)]
MyData$Lvl_Pass_Pct <- round(as.numeric(MyData$Lvl_Pass_Pct)/25, digits=0)
cols <- c('Borough','Lvl_Pass_Pct')
MyData[cols] <- lapply(MyData[cols], as.factor)
MyData <- data.frame(MyData[complete.cases(MyData),])
summary(MyData)
#split data into testing and training sets using
set.seed(2)
training_data <- data.frame(sample_n(MyData, 250))
testing_data <- -training_data
testing_predict <- MyData$Lvl_Pass_Pct[test]
MyData$Lvl_Pass_Pct[testing_data]
set.seed(2)
training_data <- data.frame(sample_n(MyData, 250))
testing_data <- -training_data
testing_predict <- MyData$Lvl_Pass_Pct[testing_data]
MyData$Lvl_Pass_Pct[rownum(testing_data)]
train <- sample(1:nrow(MyData), nrow(MyData)/2)
test <- -train
train
test
1:nrow(MyData)
nrow(MyData)/2
n_sample(1:nrow(MyData), nrow(MyData)/2)
sample_n(1:nrow(MyData), nrow(MyData)/2)
training_data <- sample_n(MyData)
training_data <- sample_n(MyData,250)
-training_data
training_data
MyData[,nrow]
nrow(MyData)
rownum(MyData)
MyData[rownum,]
MyData[rownum(MyData),]
testing_data <- MyData[-training_data,]
View(training_data)
MyData$Lvl_Pass_Pct[testing_data]
unlist(testing_data)
MyData$Lvl_Pass_Pct[unlist(testing_data)]
list(testing_data)
MyData$Lvl_Pass_Pct[list(testing_data)]
testing_data$Lvl_Pass_Pct
set.seed(2)
training_data <- sample_n(MyData,250)
testing_data <- MyData[-training_data,]
View(testing_data)
library(dplyr)
library(ISLR)
library(tree)
MyData <- read.csv(file="https://raw.githubusercontent.com/scottkarr/IS608FinalProject/master/data/ELAScoresBySchool.csv", header=TRUE, sep=",",stringsAsFactors=FALSE)
MyData <- filter(MyData, Year == 2016 & Grade == 7)
MyData <- MyData[,c(2,4,5,10,20)]
MyData$Lvl_Pass_Pct <- round(as.numeric(MyData$Lvl_Pass_Pct)/25, digits=0)
cols <- c('Borough','Lvl_Pass_Pct')
MyData[cols] <- lapply(MyData[cols], as.factor)
MyData <- data.frame(MyData[complete.cases(MyData),])
summary(MyData)
#split data into testing and training sets using
set.seed(2)
training_data <- sample_n(MyData,250)
testing_data <- MyData[-training_data,]
View(testing_data)
View(training_data)
MyData[-training_data,]
MyData[-training_data,]
smp_size <- floor(0.5 * nrow(MyData))
## set the seed to make your partition reproductible
set.seed(123)
train_ind <- sample(seq_len(nrow(MyData)), size = smp_size)
train <- MyData[train_ind, ]
test <- MyData[-train_ind, ]
library(dplyr)
library(ISLR)
library(tree)
MyData <- read.csv(file="https://raw.githubusercontent.com/scottkarr/IS608FinalProject/master/data/ELAScoresBySchool.csv", header=TRUE, sep=",",stringsAsFactors=FALSE)
MyData <- filter(MyData, Year == 2016 & Grade == 7)
MyData <- MyData[,c(2,4,5,10,20)]
MyData$Lvl_Pass_Pct <- round(as.numeric(MyData$Lvl_Pass_Pct)/25, digits=0)
cols <- c('Borough','Lvl_Pass_Pct')
MyData[cols] <- lapply(MyData[cols], as.factor)
MyData <- data.frame(MyData[complete.cases(MyData),])
summary(MyData)
#split data into testing and training sets using
## 50% of the sample size
smp_size <- floor(0.5 * nrow(MyData))
## set the seed to make your partition reproductible
set.seed(123)
train_ind <- sample(seq_len(nrow(MyData)), size = smp_size)
training_data <- MyData[train_ind, ]
testing_data <- MyData[-train_ind, ]
testing_predict <- testing_data$Lvl_Pass_Pct
tree_model <- tree(Lvl_Pass_Pct~., training_data)
plot(tree_model)
text(tree_model, pretty=0)
tree_pred <- predict(tree_model, testing_data, type='class')
mean(tree_pred != testing_predict)
View(testing_data)
View(testing_data)
View(training_data)
set.seed(3)
cv.tree <- cv.tree(tree_model, FUN=prune.misclass
cv.tree <- cv.tree(tree_model, FUN=prune.misclass)
names(cv.tree)
plot(cv.tree$size, cv_tree$dev, type = 'b')
plot(cv.tree$size, cv.tree$dev, type = 'b')
pruned_model = prune.missclass(tree_model, best = 12)
pruned_model = prune.misclass(tree_model, best = 12)
pruned_model = prune.misclass(tree_model, best = 12)
plot(pruned_model)
text(pruned_model, pretty = 0)
tree_pred <- predict(pruned_model, testing_data, type='class')
mean(tree_pred != testing_predict)
pruned_model = prune.misclass(tree_model, best = 2)
plot(pruned_model)
text(pruned_model, pretty = 0)
# recheck model's predictive potential
tree_pred <- predict(pruned_model, testing_data, type='class')
mean(tree_pred != testing_predict) 56%
pruned_model = prune.misclass(tree_model, best = 2)
plot(pruned_model)
text(pruned_model, pretty = 0)
# recheck model's predictive potential
tree_pred <- predict(pruned_model, testing_data, type='class')
mean(tree_pred != testing_predict)
pruned_model = prune.misclass(tree_model, best = 1)
plot(pruned_model)
text(pruned_model, pretty = 0)
# recheck model's predictive potential
tree_pred <- predict(pruned_model, testing_data, type='class')
mean(tree_pred != testing_predict)
pruned_model = prune.misclass(tree_model, best = 12)
plot(pruned_model)
text(pruned_model, pretty = 0)
# recheck model's predictive potential
tree_pred <- predict(pruned_model, testing_data, type='class')
mean(tree_pred != testing_predict) 56%
library(dplyr)
library(ISLR)
library(tree)
MyData <- read.csv(file="https://raw.githubusercontent.com/scottkarr/IS608FinalProject/master/data/ELAScoresBySchool.csv", header=TRUE, sep=",",stringsAsFactors=FALSE)
MyData <- filter(MyData, Year == 2016 & Grade == 7)
MyData <- MyData[,c(2,4,5, 20)]
MyData$Lvl_Pass_Pct <- round(as.numeric(MyData$Lvl_Pass_Pct)/25, digits=0)
cols <- c('Borough','Lvl_Pass_Pct')
MyData[cols] <- lapply(MyData[cols], as.factor)
MyData <- data.frame(MyData[complete.cases(MyData),])
summary(MyData)
#split data into testing and training sets using
## 50% of the sample size
smp_size <- floor(0.5 * nrow(MyData))
## set the seed to make your partition reproductible
set.seed(2)
train_ind <- sample(seq_len(nrow(MyData)), size = smp_size)
training_data <- MyData[train_ind, ]
testing_data <- MyData[-train_ind, ]
testing_predict <- testing_data$Lvl_Pass_Pct
# fit the tree model using training data
tree_model <- tree(Lvl_Pass_Pct~., training_data)
plot(tree_model)
text(tree_model, pretty=0)
# check model's predictive potential
tree_pred <- predict(tree_model, testing_data, type='class')
mean(tree_pred != testing_predict)
set.seed(3)
cv.tree <- cv.tree(tree_model, FUN=prune.misclass)
names(cv.tree)
plot(cv.tree$size, cv.tree$dev, type = 'b')
#prune the tree
pruned_model = prune.misclass(tree_model, best = 12)
plot(pruned_model)
text(pruned_model, pretty = 0)
tree_pred <- predict(pruned_model, testing_data, type='class')
mean(tree_pred != testing_predict)
shiny::runApp('IS608Spring2017/IS608FinalProject')
shiny::runGitHub('NYSchools','jbryer',subdir='NYSReportCard')
shiny::runGitHub('NYSchools','jbryer',subdir='NYSReportCard')
runApp(list(
ui = bootstrapPage(
fileInput('inputdata', 'Input shapefile',accept=c('.shp','.dbf','.sbn','.sbx','.shx',".prj"), multiple=TRUE),
plotOutput("SHPplot")
),
server = function(input, output) {
output$SHPplot <-  renderPlot({
myshape<- input$inputdata
if (is.null(myshape))
return(NULL)
dir<-dirname(myshape[1,4])
for ( i in 1:nrow(myshape)) {
file.rename(myshape[i,4], paste0(dir,"/",myshape[i,1]))}
getshp <- list.files(dir, pattern="*.shp", full.names=TRUE)
shape<-readShapePoly(getshp)
plot(shape)
})
}
))
runApp(list(
ui = bootstrapPage(
fileInput('inputdata', 'Input shapefile',accept=c('.shp','.dbf','.sbn','.sbx','.shx',".prj"), multiple=TRUE),
plotOutput("SHPplot")
),
server = function(input, output) {
output$SHPplot <-  renderPlot({
myshape<- input$inputdata
if (is.null(myshape))
return(NULL)
dir<-dirname(myshape[1,4])
for ( i in 1:nrow(myshape)) {
file.rename(myshape[i,4], paste0(dir,"/",myshape[i,1]))}
getshp <- list.files(dir, pattern="*.shp", full.names=TRUE)
shape<-readShapePoly(getshp)
plot(shape)
})
}
))
runApp(list(
ui = bootstrapPage(
fileInput('inputdata', 'Input shapefile',accept=c('.shp','.dbf','.sbn','.sbx','.shx',".prj"), multiple=TRUE),
plotOutput("SHPplot")
),
server = function(input, output) {
output$SHPplot <-  renderPlot({
myshape<- input$inputdata
if (is.null(myshape))
return(NULL)
dir<-dirname(myshape[1,4])
for ( i in 1:nrow(myshape)) {
file.rename(myshape[i,4], paste0(dir,"/",myshape[i,1]))}
getshp <- list.files(dir, pattern="*.shp", full.names=TRUE)
shape<-readShapePoly(getshp)
plot(shape)
})
}
))
library(shiny)
runApp(list(
ui = bootstrapPage(
fileInput('inputdata', 'Input shapefile',accept=c('.shp','.dbf','.sbn','.sbx','.shx',".prj"), multiple=TRUE),
plotOutput("SHPplot")
),
server = function(input, output) {
output$SHPplot <-  renderPlot({
myshape<- input$inputdata
if (is.null(myshape))
return(NULL)
dir<-dirname(myshape[1,4])
for ( i in 1:nrow(myshape)) {
file.rename(myshape[i,4], paste0(dir,"/",myshape[i,1]))}
getshp <- list.files(dir, pattern="*.shp", full.names=TRUE)
shape<-readShapePoly(getshp)
plot(shape)
})
}
))
runApp(list(
ui = bootstrapPage(
fileInput('inputdata', 'Input shapefile',accept=c('.shp','.dbf','.sbn','.sbx','.shx',".prj"), multiple=TRUE),
plotOutput("SHPplot")
),
server = function(input, output) {
output$SHPplot <-  renderPlot({
myshape<- input$inputdata
if (is.null(myshape))
return(NULL)
dir<-dirname(myshape[1,4])
for ( i in 1:nrow(myshape)) {
file.rename(myshape[i,4], paste0(dir,"/",myshape[i,1]))}
getshp <- list.files(dir, pattern="*.shp", full.names=TRUE)
shape<-readShapePoly(getshp)
plot(shape)
})
}
))
runApp(list(
ui = bootstrapPage(
fileInput('inputdata', 'Input shapefile',accept=c('.shp','.dbf','.sbn','.sbx','.shx',".prj"), multiple=TRUE),
plotOutput("SHPplot")
),
server = function(input, output) {
output$SHPplot <-  renderPlot({
myshape<- input$inputdata
if (is.null(myshape))
return(NULL)
dir<-dirname(myshape[1,4])
for ( i in 1:nrow(myshape)) {
file.rename(myshape[i,4], paste0(dir,"/",myshape[i,1]))}
getshp <- list.files(dir, pattern="*.shp", full.names=TRUE)
shape<-readShapePoly(getshp)
plot(shape)
})
}
))
runApp(list(
ui = bootstrapPage(
fileInput('inputdata', 'Input shapefile',accept=c('.shp','.dbf','.sbn','.sbx','.shx',".prj"), multiple=TRUE),
plotOutput("SHPplot")
),
server = function(input, output) {
output$SHPplot <-  renderPlot({
myshape<- input$inputdata
if (is.null(myshape))
return(NULL)
dir<-dirname(myshape[1,4])
for ( i in 1:nrow(myshape)) {
file.rename(myshape[i,4], paste0(dir,"/",myshape[i,1]))}
getshp <- list.files(dir, pattern="*.shp", full.names=TRUE)
shape<-readShapePoly(getshp)
plot(shape)
})
}
))
shiny::runApp('IS608Spring2017/Project/final')
shiny::runApp('IS608Spring2017/Project/ByRegion')
shiny::runApp('IS608Spring2017/Project/ByRegion')
setwd("/Users/scottkarr/IS608Spring2017/Project/final/nysd_17a")
shpfile <- readOGR(getwd(), "nysd")
library(raster)
library(rgdal)
library(dplyr)
library(ggplot2)
setwd("/Users/scottkarr/IS608Spring2017/Project/final/nysd_17a")
shpfile <- readOGR(getwd(), "nysd")
setwd("/Users/scottkarr/IS608Spring2017/Project/final/nysd_17a")
shiny::runApp('IS608Spring2017/Project/ByRegion')
setwd("/Users/scottkarr/IS608Spring2017/Project/nysd_17a")
shpfile <- readOGR(getwd(), "nysd")
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
df <- read.csv(file="https://raw.githubusercontent.com/scottkarr/IS608FinalProject/master/data/ELAScoresBySchool.csv", header=TRUE, sep=",",stringsAsFactors=FALSE)
dfSlice <- df %>%
filter(Year == 2016, Grade == 7)
dfSlice <- dfSlice[,c(2,4,6,7,8,10,20)]
dfSlice <- dfSlice[complete.cases(dfSlice),]
dfSum <- dfSlice %>%
group_by (Borough, District) %>%
summarize(Pass = mean(as.numeric(Lvl_Pass_Pct), na.rm = TRUE))
View(dfSlice)
dfSlice <- df %>%
filter(Year == 2016, Grade == 7)
dfSlice <- dfSlice[,c(2,4,7,8,10,20)]
dfSlice <- dfSlice[complete.cases(dfSlice),]
dfSum <- dfSlice %>%
group_by (Borough, District) %>%
summarize(Pass = mean(as.numeric(Lvl_Pass_Pct), na.rm = TRUE))
View(dfSlice)
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
dfSlice <- df %>%
filter(Year == 2016, Grade == 7)
dfSlice <- dfSlice[,c(2,4,7,8,10,20)]
dfSlice <- dfSlice[complete.cases(dfSlice),]
dfSum <- dfSlice %>%
group_by (Borough, District) %>%
summarize(Pass = mean(as.numeric(Lvl_Pass_Pct), na.rm = TRUE))
df <- read.csv(file="https://raw.githubusercontent.com/scottkarr/IS608FinalProject/master/data/ELAScoresBySchool.csv", header=TRUE, sep=",",stringsAsFactors=FALSE)
dfSlice <- df %>%
filter(Year == 2016, Grade == 7)
dfSlice <- dfSlice[,c(4,7,8,20)]
dfSlice <- dfSlice[complete.cases(dfSlice),]
dfSum <- dfSlice %>%
group_by (Borough, District) %>%
summarize(Pass = mean(as.numeric(Lvl_Pass_Pct), na.rm = TRUE))
View(dfSlice)
View(dfSlice)
df <- read.csv(file="https://raw.githubusercontent.com/scottkarr/IS608FinalProject/master/data/ELAScoresBySchool.csv", header=TRUE, sep=",",stringsAsFactors=FALSE)
dfSlice <- df %>%
filter(Year == 2016, Grade == 7)
dfSlice <- dfSlice[,c(2,4,20)]
dfSlice <- dfSlice[complete.cases(dfSlice),]
dfSum <- dfSlice %>%
group_by (Borough, District) %>%
summarize(Pass = mean(as.numeric(Lvl_Pass_Pct), na.rm = TRUE))
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
View(dfSlice)
dfSlice <- df %>%
filter(Year == 2016, Grade == 7)
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
dfSum <- dfSlice %>%
group_by (Borough, District) %>%
summarize(Pass = mean(as.numeric(Lvl_Pass_Pct), na.rm = TRUE))
View(dfSum)
shpfile@data <- left_join(shpfile@data, dfSum, by=c("SchoolDist" = "District"))
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
colorRampPalette(c("red","orange",
"yellow", "lightblue", "blue",
"purple"))
my.cols<-colorRampPalette(c("white", "cyan","blue","green","yellow","red"))
View(my.cols)
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
library(dichromat)
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
myPalette <- choose_palette()
View(myPalette)
View(my.cols)
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
myPalette
library("colorspace")
myPalette <- choose_palette()
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
myPallette(32)
myPalette(32)
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
library(raster)
library(rgdal)
library(dplyr)
library(ggplot2)
library(colorspace)
setwd("/Users/scottkarr/IS608Spring2017/Project/nysd_17a")
df <- read.csv(file="https://raw.githubusercontent.com/scottkarr/IS608FinalProject/master/data/ELAScoresBySchool.csv", header=TRUE, sep=",",stringsAsFactors=FALSE)
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
myPalette(32)
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
choose_palette()
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
library(colorspace)
choose_palette()
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
choose_palette()
choose_palette()
choose_palette()
choose_palette()
palette <- palette()
palette
palette <- palette()
palette <- choose_palette()
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
palette <- choose_palette()
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
palette <- choose_palette()
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
palette <- choose_palette()
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
shiny::runApp('~/IS608Spring2017/Project/ByRegion')
